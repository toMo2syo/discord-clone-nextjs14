generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ProfileStatus {
  ONLINE
  OFFLINE
  IDLE
}

model Profile {
  profileId                String                     @id @default(uuid())
  name                     String
  email                    String                     @unique
  avatarUrl                String?
  introduction             String?
  lastOnlineTime           DateTime?
  createdAt                DateTime                   @default(now())
  status                   ProfileStatus?
  servers                  Server[]
  memberships              ServerMembership[]
  sentFriendRequests       FriendRequest[]            @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]            @relation("ReceivedFriendRequests")
  sentMessage              DirectMessage[]            @relation("sentDirectMessage")
  receivedMessage          DirectMessage[]            @relation("receivedDirectMessage")
  friends                  Friend[]                   @relation("ProfileFriends")
  friendOfProfiles         Friend[]                   @relation("FriendOfProfiles")
  ProfileMessageReadStatus ProfileMessageReadStatus[]
}

model Server {
  serverId    String             @id @default(uuid())
  ownerId     String
  serverName  String
  imageUrl    String?
  description String?
  inviteCode  String             @unique @default(uuid())
  createdAt   DateTime           @default(now())
  owner       Profile            @relation(fields: [ownerId], references: [profileId], onDelete: Cascade)
  channels    Channel[]
  memberships ServerMembership[]

  @@index([ownerId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  channelId     String         @id @default(uuid())
  serverId      String
  channelName   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  channelType   ChannelType    @default(TEXT)
  server        Server         @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  groupMessages GroupMessage[]

  @@index([serverId])
}

enum ServerRoleType {
  ADMIN
  MODERATOR
  GUEST
}

model ServerMembership {
  membershipId String         @id @default(uuid())
  serverId     String
  profileId    String
  serverRole   ServerRoleType
  isMuted      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  server       Server         @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  profile      Profile        @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
  messages     GroupMessage[]

  @@unique([serverId, profileId])
  @@index([profileId])
  @@index([serverId])
}

model GroupMessage {
  messageId    String                     @id @default(uuid())
  fileUrl      String?                    @db.Text
  content      String                     @db.Text
  isEddited    Boolean                    @default(false)
  isDeleted    Boolean                    @default(false)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  channelId    String
  membershipId String
  channel      Channel                    @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  member       ServerMembership           @relation(fields: [membershipId], references: [membershipId], onDelete: Cascade)
  readStatus   ProfileMessageReadStatus[]

  @@index([channelId])
  @@index([membershipId])
}

model DirectMessage {
  messageId  String   @id @default(uuid())
  senderId   String
  receiverId String
  fileUrl    String?  @db.Text
  isRead     Boolean  @default(false)
  content    String   @db.Text
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  sender     Profile  @relation("sentDirectMessage", fields: [senderId], references: [profileId], onDelete: Cascade)
  receiver   Profile  @relation("receivedDirectMessage", fields: [receiverId], references: [profileId], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId])
}

model ProfileMessageReadStatus {
  id        String       @id @default(uuid())
  messageId String
  profileId String
  isRead    Boolean      @default(false)
  message   GroupMessage @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  profile   Profile      @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
}

enum FriendRequestStatus {
  PENDING
  IGNORED
  ACCPETED
}

model FriendRequest {
  requestId  String              @id @default(uuid())
  senderId   String
  receiverId String
  createdAt  DateTime            @default(now())
  sender     Profile             @relation("SentFriendRequests", fields: [senderId], references: [profileId], onDelete: Cascade)
  receiver   Profile             @relation("ReceivedFriendRequests", fields: [receiverId], references: [profileId], onDelete: Cascade)
  status     FriendRequestStatus @default(PENDING)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Friend {
  friendId           String   @id @default(uuid())
  profileId          String
  friendProfileId    String
  isBlockedByProfile Boolean  @default(false)
  isBlockedByFriend  Boolean  @default(false)
  createdAt          DateTime @default(now())
  profile            Profile  @relation("ProfileFriends", fields: [profileId], references: [profileId], onDelete: Cascade)
  friendProfile      Profile  @relation("FriendOfProfiles", fields: [friendProfileId], references: [profileId], onDelete: Cascade)

  @@unique([profileId, friendId])
  @@index([profileId])
  @@index([friendProfileId])
}
