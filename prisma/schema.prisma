generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ProfileStatus {
  ONLINE
  OFFLINE
  IDLE
}

model Profile {
  profileId               String              @id @default(uuid())
  name                    String
  email                   String              @unique
  avatarUrl               String?
  introduction            String?
  lastOnlineTime          DateTime?
  createdAt               DateTime            @default(now())
  status                  ProfileStatus?
  servers                 Server[]
  memberships             ServerMembership[]
  sentFriendRequests      FriendRequest[]     @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]     @relation("ReceivedFriendRequests")
  sentMessages            DirectMessage[]     @relation("SentMessages")
  receivedMessages        DirectMessage[]     @relation("ReceivedMessages")
  convsersationsInitiated Conversation[]      @relation("initiator")
  convsersationsRecieved  Conversation[]      @relation("reciever")
  friends                 Friend[]            @relation("ProfileFriends")
  friendOfProfiles        Friend[]            @relation("FriendOfProfiles")
  MessageReadStatus       MessageReadStatus[]
}

model Server {
  serverId    String             @id @default(uuid())
  ownerId     String
  serverName  String
  imageUrl    String?
  description String?
  inviteCode  String             @unique @default(uuid())
  createdAt   DateTime           @default(now())
  owner       Profile            @relation(fields: [ownerId], references: [profileId], onDelete: Cascade)
  channels    Channel[]
  memberships ServerMembership[]

  @@index([ownerId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  channelId     String         @id @default(uuid())
  serverId      String
  channelName   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  channelType   ChannelType    @default(TEXT)
  server        Server         @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  groupMessages GroupMessage[]

  @@index([serverId])
}

enum ServerRoleType {
  ADMIN
  MODERATOR
  GUEST
}

model ServerMembership {
  membershipId String         @id @default(uuid())
  serverId     String
  profileId    String
  serverRole   ServerRoleType
  isMuted      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  server       Server         @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
  profile      Profile        @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
  messages     GroupMessage[]

  @@unique([serverId, profileId])
  @@index([profileId])
  @@index([serverId])
}

model GroupMessage {
  messageId    String              @id @default(uuid())
  fileUrl      String?             @db.Text
  content      String              @db.Text
  isEdited     Boolean             @default(false)
  isDeleted    Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  channelId    String
  membershipId String
  channel      Channel             @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  member       ServerMembership    @relation(fields: [membershipId], references: [membershipId], onDelete: Cascade)
  readStatus   MessageReadStatus[]

  @@index([channelId])
  @@index([membershipId])
}

model Conversation {
  conversationId String          @id @default(uuid())
  initiatorId    String
  recieverId     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  messages       DirectMessage[]

  initiator Profile @relation("initiator", fields: [initiatorId], references: [profileId], onDelete: Cascade)
  reciever  Profile @relation("reciever", fields: [recieverId], references: [profileId], onDelete: Cascade)

  @@unique([initiatorId, recieverId])
  @@index([initiatorId])
  @@index([recieverId])
}

model DirectMessage {
  messageId      String       @id @default(uuid())
  conversationId String
  senderId       String
  receiverId     String
  fileUrl        String?      @db.Text
  isRead         Boolean      @default(false)
  content        String       @db.Text
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  sender         Profile      @relation("SentMessages", fields: [senderId], references: [profileId], onDelete: Cascade)
  receiver       Profile      @relation("ReceivedMessages", fields: [receiverId], references: [profileId], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
}

model MessageReadStatus {
  id        String       @id @default(uuid())
  messageId String
  profileId String
  isRead    Boolean      @default(false)
  readAt    DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  message   GroupMessage @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  profile   Profile      @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
}

enum FriendRequestStatus {
  PENDING
  IGNORED
  ACCEPTED
}

model FriendRequest {
  requestId  String              @id @default(uuid())
  senderId   String
  receiverId String
  createdAt  DateTime            @default(now())
  sender     Profile             @relation("SentFriendRequests", fields: [senderId], references: [profileId], onDelete: Cascade)
  receiver   Profile             @relation("ReceivedFriendRequests", fields: [receiverId], references: [profileId], onDelete: Cascade)
  status     FriendRequestStatus @default(PENDING)

  @@index([senderId])
  @@index([receiverId])
}

model Friend {
  friendId           String   @id @default(uuid())
  profileId          String
  friendProfileId    String
  isBlockedByProfile Boolean  @default(false)
  isBlockedByFriend  Boolean  @default(false)
  createdAt          DateTime @default(now())
  profile            Profile  @relation("ProfileFriends", fields: [profileId], references: [profileId], onDelete: Cascade)
  friendProfile      Profile  @relation("FriendOfProfiles", fields: [friendProfileId], references: [profileId], onDelete: Cascade)

  @@index([profileId])
  @@index([friendProfileId])
}
